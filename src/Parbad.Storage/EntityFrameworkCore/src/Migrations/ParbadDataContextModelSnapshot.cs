// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Parbad.Storage.EntityFrameworkCore.Context;

namespace Parbad.Storage.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(ParbadDataContext))]
    partial class ParbadDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Parbad.Storage.EntityFrameworkCore.Domain.Payments.PaymentEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("payment_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime2");

                    b.Property<string>("GatewayAccountName")
                        .HasColumnName("gateway_account_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GatewayName")
                        .IsRequired()
                        .HasColumnName("gateway_name")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("IsCompleted")
                        .HasColumnName("is_completed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnName("is_paid")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnName("token")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("TrackingNumber")
                        .HasColumnName("tracking_number")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionCode")
                        .HasColumnName("transaction_code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("payment_id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("TrackingNumber")
                        .IsUnique();

                    b.ToTable("payment","Parbad");
                });

            modelBuilder.Entity("Parbad.Storage.EntityFrameworkCore.Domain.Transactions.TransactionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("transaction_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalData")
                        .HasColumnName("additional_data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSucceed")
                        .HasColumnName("is_succeed")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnName("message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("transaction_id");

                    b.HasIndex("PaymentId");

                    b.ToTable("transaction","Parbad");
                });

            modelBuilder.Entity("Parbad.Storage.EntityFrameworkCore.Domain.Transactions.TransactionEntity", b =>
                {
                    b.HasOne("Parbad.Storage.EntityFrameworkCore.Domain.Payments.PaymentEntity", "Payment")
                        .WithMany("Transactions")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
